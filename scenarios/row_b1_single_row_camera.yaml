context: "single_row_camera"

storage_method: "filesystem"  # Where to store the data (database or filesystem)
                                # database will store it on the localhost database client connection TODO: Connect to database with specific configuration
                              # filesystem will store the information on file system under a folder named $save_location/$context
                                # $save_location must be set in the launch file e.g. /ext_drive/saved_data

store_topics: {  # Key, Value pairs of storage key, topic content (the topics listed here will be saved in this tree)
  # "environment": "/pi0_bme680",
  localisation: {
    laser_scan: "/scan",
    current_edge: "/current_edge",
    current_node: "/current_node",
    closest_node: "/closest_node",
    amcl: "/amcl_pose",
    robot_pose: "/robot_pose"
  },
  rgb: {
    image: "/realsense_camera/color/image_raw",
    intrinsics: "/realsense_camera/color/camera_info"
  },
  depth: {
    image: "/realsense_camera/depth/image_rect_raw",
    intrinsics: "/realsense_camera/depth/camera_info"
  },
  aligned_depth_to_rgb: {
    image: "/realsense_camera/aligned_depth_to_color/image_raw",
    intrinsics: "/realsense_camera/aligned_depth_to_color/camera_info"
  },
  aligned_depth_to_ir_left: {
    image: "/realsense_camera/aligned_depth_to_infra1/image_raw",
    intrinsics: "/realsense_camera/aligned_depth_to_infra1/camera_info"
  },
  ir_left: {
    image: "/realsense_camera/infra1/image_rect_raw",
    intrinsics: "/realsense_camera/infra1/camera_info"
  },
  ir_right: {
    image: "/realsense_camera/infra2/image_rect_raw",
    intrinsics: "/realsense_camera/infra2/camera_info"
  },
  extrinsics: {
    depth_to_color: "/realsense_camera/extrinsics/depth_to_color",
    depth_to_ir_left: "/realsense_camera/extrinsics/depth_to_infra1",
    depth_to_ir_right: "/realsense_camera/extrinsics/depth_to_infra2",
  },
}

collection_method:  # These parameters describe the robot data capture behaviour
  name: "traversal"   # traversal will tell the robot to move to the listed way points and capture
                        #   - Requires 'way_points' field (list of way point names)
                        #   - Requires 'max_retries_per_node' field (if a capture at a node fails, it will retry n times)
                      # whitelist will capture when the robot arrives at way points with tags in the 'tags' list
                        #   - Requires 'tags' field (list of tags to capture data at)
                      # blacklist will capture when the robot arrives at way points with tags not in the 'tags' list
                        #   - Requires 'tags' field (list of tags to capture data at)
                      # timer will wait n seconds between captures (
                        #   - Requires 'capture_delay' field (number of seconds between captures)
                      # event will until the 'watch_topic' topic publishes a new message (useful for videoing)
                      #   - Requires 'watch_topic' field (topic name to wait for an update on)
  way_points:  # List of way points the robot will move to and capture data at if 'traversal' mode set above
    - "WayPoint68"
    - "WayPoint69"
    - "WayPoint68"
  max_retries_per_node: 5  # Number of times the robot will try to recover if in 'traversal' mode
  tags:  # The tags to cross-reference met nodes with in '(white/black)list' modes
    - "inner-polytunnel"
  capture_delay: 3  # The delay between timer captures
  watch_topic: "/realsense_camera/color/image_raw"


cameras:  # A list of dictionaries defining the cameras
  - {
    name: "realsense_camera",  # Required: Pretty name used in the database for association
    serial: "",  # Required: The camera serial to find (leave blank to auto find a connected device)
    json_config: "auto"  # Optional: The configuration to load onto this camera (set to 'auto' to attempt to find one)
  }


